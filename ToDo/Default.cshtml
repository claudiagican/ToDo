@{
    Layout = "~/_Layout.cshtml";

    IEnumerable<dynamic> projectsData = null;

    var message = "";
    var prjName = "";
    Database db = null;

    if (WebSecurity.IsAuthenticated)
    {
        var userId = WebSecurity.CurrentUserId;
        var selectCommand = "";

        // list all projects
        selectCommand = "SELECT Projects.* FROM Projects, ProjectUser " +
                        "WHERE ProjectUser.UID = @0 and ProjectUser.PID=Projects.PID and Projects.IsDeleted=0";
        db = Database.Open("ToDo");
        projectsData = db.Query(selectCommand, userId);
        db.Close();

        // add new project
        if (!Request.QueryString["AddPro"].IsEmpty())
        {
            Validation.RequireField("prjName", "You must enter a name");
            
            if (IsPost && Validation.IsValid())
            {
                prjName = Request.Form["prjName"];
                
                db = Database.Open("ToDo");
                var insertCommand = "INSERT INTO Projects (Name, UIDMain, DateCreated, DateUpdated) VALUES(@0, @1, getdate(), getdate())";
                db.Execute(insertCommand, prjName, userId);
                
                var newProId = db.GetLastInsertId();
                insertCommand = "INSERT INTO ProjectUser (PID, UID) VALUES(@0, @1)";
                db.Execute(insertCommand, newProId, userId);
                db.Close();                
                Response.Redirect("~/Default");
            } 
        // edit project           
        }else if (!Request.QueryString["EditPro"].IsEmpty())
        {
            Validation.RequireField("prjName", "You must enter a name");
            
            if (IsPost && Validation.IsValid())
            {
                var projectId = -1;
                if (!Request.QueryString["EditPro"].IsEmpty() && Request.QueryString["EditPro"].IsInt())
                {
                    projectId = Request.QueryString["EditPro"].AsInt();
                }                
                
                prjName = Request.Form["prjName"];
                
                var updateCommand = "Update Projects SET Name=@0, DateUpdated=getdate() WHERE PID=@1";
                db = Database.Open("ToDo");
                db.Execute(updateCommand, prjName, projectId);
                db.Close();
                Response.Redirect("~/Default");                
            }             
        }
        // delete project
        if (!Request.QueryString["DeletePro"].IsEmpty())
        {
            var projectId = -1;
            if (!Request.QueryString["DeletePro"].IsEmpty() && Request.QueryString["DeletePro"].IsInt())
            {
                projectId = Request.QueryString["DeletePro"].AsInt();
            }
            var updateCommand = "Update Projects SET IsDeleted=1, DateUpdated=getdate() WHERE PID=@0";
            db = Database.Open("ToDo");
            db.Execute(updateCommand, projectId);
            db.Close();
            Response.Redirect("~/Default");                          
        }                
    }
    else // login or register
    {
        
        if (Request.Form["login"] != null)
        {
            var email = Request["email"].Trim();
            var password = Request["password"].Trim();
            var rememberMe = Request["rememberMe"].AsBool(); // TODO investigate this for true!!!

            Validation.RequireField("email", "Missing email.");
            Validation.RequireField("password", "Missing password.");
            
            if (IsPost && Validation.IsValid()){
                
                if (WebSecurity.Login(email, password, false))
                {
                    if (!Request.QueryString["returnUrl"].IsEmpty())
                    {
                        var url = Request.QueryString["returnUrl"];
                        Response.Redirect("~/" + url);
                    }
                    else
                    {
                        Response.Redirect("~/Default");
                    }
                }
                else
                {
                    message = "Log In not successful. Email or password are not valid.";
                }
            }
        }
        if (Request.Form["register"] != null)
        {

            WebSecurity.Logout();

            var email = Request["r_email"].Trim();
            var name = Request["r_username"].Trim();
            var password = Request["r_password"].Trim();
            var confirmPassword = Request["r_confirmPassword"].Trim();

            Validation.RequireField("r_email", "Email is mandatory, it will be used for log in.");
            Validation.RequireField("r_password", "Password is mandatory.");
            Validation.RequireField("r_username", "Display name is mandatory.");
            Validation.Add("r_password", Validator.StringLength(128, 6, "Password must have at least 6 characters"));
            var regex = Validator.Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,4})+)$", "Invalid email format.");
            Validation.Add("r_email", regex); 
            
            if (IsPost && Validation.IsValid())
            {
                if (password != confirmPassword)
                {
                    message = "Passwords don't match.";
                }
                else
                {
                    if (WebSecurity.UserExists(email))
                    {
                        message = String.Format("Email '{0}' already registred. You should Log In.", email);
                    }
                    else
                    {
                        WebSecurity.CreateUserAndAccount(email, password, new { username = name }, false);
                        WebSecurity.Login(email, password, true);

                        Response.Redirect("~/Default");
                    }
                }
            }
        }
    } // end login or register 
}

@if (WebSecurity.IsAuthenticated)
{  
    // Add Project link
    if (!Request.Url.ToString().Contains("AddPro")) 
    { 
        <p>
            <a href="@Href("~/Default?AddPro=0")" class="button linkBtn" title="Add new project first. Later you can define milestones and tasks for it">New Project</a>
        </p>     
    } else // Add project form
    {
        <div>
            <form method="post" class="projForm">
            <fieldset>
                <legend>New Project Information</legend>
                @Html.ValidationSummary()
                <p><label for="prjName">Project name: </label>
                    <input type="text" name="prjName" class="nameInput" value="@Request.Form["prjName"]" />
                </p>
                <div class="formButtons">
                    <input type="submit" name="addProject" value="Add" class="button submitBtn" />
                    <a href="@Href("~/Default")" class="button linkBtn nextBtn">Cancel</a>
                </div>
                
            </fieldset>
            </form> 
        </div>     
    }
    // Projects list   
    foreach (var item in projectsData)
    {
        <h1><a href="~/Project?pid=@item["PID"]" title="see and build project details">@item["Name"]</a></h1>

        <p class="projRow">
            <span>Created @ToDo.Utils.TimeFromNow(item["DateCreated"])</span> 
            <a href="~/Default?EditPro=@item["PID"]" class="cellEditDel">Edit</a>
            <a href="~/Default?DeletePro=@item["PID"]" class="cellEditDel" onclick="return confirm('Are you sure you want to delete this project?')">Delete</a>
        </p>
        var projectName = item["Name"];
        // Edit project form
        if (Request.Url.ToString().Contains("EditPro") && Request.QueryString["EditPro"].AsInt() == item["PID"])
        {
            <div>
                <form method="post" class="projForm">
                <fieldset>
                    <legend>Edit Project Information</legend>
                    @Html.ValidationSummary()
                    <p><label for="prjName">Project name:</label>
                        <input type="text" name="prjName" class="nameInput" value="@projectName" />
                    </p>
                    <div class="formButtons">
                        <input type="submit" name="editProject" value="Save" class="button submitBtn" />
                        <a href="@Href("~/Default")" class="button linkBtn nextBtn">Cancel</a>
                    </div>
                
                </fieldset>
                </form> 
            </div>    
        }     
    }
}
else
{ // login & register panels
    <p>
        @if (message != "")
        {
            <span class="message">@message</span>
        }
        <span class="message">@Html.ValidationSummary()</span>
    </p>
    <div id="loginBox" class="box">
        <h2>Login</h2>        
        <form method="post" id="loginForm">
            <p>
                <label for="email">Email: </label><input type="text" name="email" id="email" value="@Request["email"]" />
            </p>
            <p>
                <label for="password">Password: </label><input type="password" name="password" id="password" value="" />
            </p>
            <p>
                <label for="rememberMe">Remember me</label><input type="checkbox" name="rememberMe" checked="checked" />
            </p>
            <p>
                <em><a href="#">forget your password?</a></em>
            </p>
            <p>
                <input type="submit" name="login" class="button submitBtn loginBtn" value="Log In" />
            </p>
        </form>
    </div>
    <div id="regBox" class="box">
        <h2>First time here? Register!</h2>
        <form method="post" id="regForm">
            <p>
                <label for="r_email">Email: </label><input type="text" name="r_email" id="r_email" value="@Request["r_email"]" autocomplete="off"/>
            </p>
            <p>
                <label for="r_password">Password: </label><input type="password" name="r_password" id="r_password" value="" autocomplete="off"/>
            </p>
            <p>
                <label for="r_confirmPassword">Confirm password: </label><input type="password" name="r_confirmPassword" id="r_confirmPassword" value="" autocomplete="off"/>
            </p>
            <p>
                <label for="r_username">Display name: </label><input type="text" name="r_username" id="r_username" value="@Request["r_username"]" autocomplete="off"/>
            </p>
            <p>
                <input type="submit" name="register" class="button submitBtn registerBtn" value="Register" />
            </p>
        </form> 
    </div>     
}